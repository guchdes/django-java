/**
 * 在需要发布的项目中调用:
 * apply from: "${rootDir}/gradle/publish.gradle"
 */

buildscript {
    configure(it, pluginRepoConfigurer)
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.27.0'
    }
}

import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "com.github.ben-manes.versions"

ext {
    def buildTimeAndDate = OffsetDateTime.now()
    buildDate = DateTimeFormatter.ISO_LOCAL_DATE.format(buildTimeAndDate)
    buildTime = DateTimeFormatter.ofPattern('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    buildRevision = versioning.info.commit
}

// Copy LICENSE
tasks.withType(Jar) {
    from(project.rootDir) {
        include 'LICENSE'
        into 'META-INF'
    }
}

// Generate MANIFEST.MF
jar {
    manifest {
        attributes(
                'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                'Built-By': "travis",
                'Build-Date': buildDate,
                'Build-Time': buildTime,
                'Built-OS': "${System.properties['os.name']}",
                'Build-Revision': buildRevision,
                'Specification-Title': project.name,
                'Specification-Version': "${projectVersion}",
                'Implementation-Title': project.name,
                'Implementation-Version': "${projectVersion}",
        )
    }
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        locale 'zh_CN'
        failOnError = false
    }
    options.addBooleanOption('Xdoclint:none', true)
    options.encoding = "utf-8"
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

def localPublish = project.findProperty("LOCAL_REPO_PUBLISH")?.toLowerCase() == "true"
if (project != rootProject) {
    //发布源码
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        classifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier = 'javadoc'
    }
}

project.afterEvaluate {

    def isReleaseVersion = !(project.getVersion() =~ /-SNAPSHOT$/)

    publishing {
        publications {
            mavenJava(MavenPublication) {

                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'django-java'
                    description = 'A java Object Document Mapping framework for mongodb.'

                    url = 'https://github.com/guchdes/grpc-spring-boot-starter'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'http://www.opensource.org/licenses/mit-license.php'
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'guchdes'
                            name = 'guch'
                            email = '237129512@qq.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/guchdes/django-java.git'
                        developerConnection = 'scm:git:git@github.com:guchdes/django-java.git'
                        url = 'https://github.com/guchdes/django-java.git'
                    }
                }
            }
        }

        if (localPublish) {
            repositories {
                maven {
                    credentials {
                        username project.property('LOCAL_REPO_USER')
                        password project.property('LOCAL_REPO_PASS')
                    }

                    if (isReleaseVersion) {
                        url  project.property('LOCAL_REPO_REALEASE')
                    } else {
                        url  project.property('LOCAL_REPO_SNAPSHOT')
                    }
                }
            }
        } else {
            repositories {
                maven {
                    credentials {
                        username project.property('ossrhUsername')
                        password project.property('ossrhPassword')
                    }

                    if (isReleaseVersion) {
                        url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                    } else {
                        url "https://oss.sonatype.org/content/repositories/snapshots"
                    }
                }
            }

            signing {
                sign publishing.publications.mavenJava
            }

        }

    }
}
