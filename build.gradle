buildscript {
    ext {
        projectVersion = '3.4.0'
        mongoDriverVersion = '3.12.0'
        springBootVersion = '2.2.1.RELEASE'
    }
    apply from: "${rootDir}/gradle/repo.gradle"
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id "net.nemerosa.versioning" version "2.10.0"
    id "io.franzbecker.gradle-lombok" version "3.2.0" apply false
    id "com.github.ben-manes.versions" version "0.27.0" // SCM info
    id "com.github.hierynomus.license" version "0.15.0"
}

def dependencyManagedProjects = allprojects
configure(dependencyManagedProjects) {
    apply plugin: 'io.spring.dependency-management'
    buildscript {
        dependencyManagement {
            resolutionStrategy { cacheChangingModulesFor 0, 'seconds' }
            imports {
                mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
            }

            dependencies {
                dependency group: 'org.mongodb', name: 'mongodb-driver-core', version: "${mongoDriverVersion}"
                dependency group: 'org.mongodb', name: 'mongo-java-driver', version: "${mongoDriverVersion}"
                dependency group: 'org.mongodb', name: 'mongodb-driver-sync', version: "${mongoDriverVersion}"
                dependency group: 'org.mongodb', name: 'bson', version: "${mongoDriverVersion}"
            }
        }
    }
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'io.franzbecker.gradle-lombok'

    group = "io.github.guchdes"
    version = "${projectVersion}"

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        options.encoding = 'UTF-8'
//        options.warnings = false
    }

    compileJava.options*.compilerArgs = [
            "-Xlint:all", "-Xlint:-processing", "-Xlint:-serial"
    ]

    java {
        registerFeature('optionalSupport') {
            usingSourceSet(sourceSets.main)
        }
    }

    dependencies {
        testCompile 'org.codehaus.groovy:groovy-all:2.5.8'
        testCompile group: 'org.spockframework', name: 'spock-core', version: '1.3-groovy-2.5'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testRuntimeOnly 'org.objenesis:objenesis:1.3'
        testRuntimeOnly "net.bytebuddy:byte-buddy:1.9.3"
        testCompile 'ch.qos.logback:logback-classic:1.1.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
        // spock1以junit4基础，添加junit-vintage-engine使spock和junit5兼容
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.3.1"
        testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    }
    test {
        useJUnitPlatform()
    }

    sourceSets {
        test {
            groovy.srcDirs = ['src/test/functional', 'src/test/unit']
        }
    }
}

def bsonDependenciesConf = {
    dependencies {
        compile  group: 'org.objenesis', name: 'objenesis', version: '3.0.1'
        compile 'org.apache.commons:commons-lang3:3.8.1'
        compile 'cglib:cglib:3.2.5'
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
        compile 'com.google.code.findbugs:jsr305:3.0.2'
        compile "org.mongodb:bson"
        compile "org.mongodb:mongodb-driver-sync"

        optionalSupportImplementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    }
}

def coreDependenciesConf = {
    dependencies {
        compile(group: 'org.mongodb', name: 'mongo-java-driver') {
            exclude group: 'org.mongodb', module: 'mongodb-driver-core'
        }
        compile group: 'org.mongodb', name: 'mongodb-driver-core'

        optionalSupportImplementation("org.springframework.boot:spring-boot")
        optionalSupportImplementation("org.springframework.boot:spring-boot-autoconfigure")
        optionalSupportImplementation 'net.sf.ehcache:ehcache:1.3.0'
        optionalSupportImplementation 'com.github.ben-manes.caffeine:caffeine:2.8.0'
        testImplementation(group: 'log4j', name: 'log4j', version: '1.2.17', transitive: false)

        compile 'com.github.javen205:IJPay-All:2.6.2'
    }
}

configure(project, bsonDependenciesConf)
configure(project, coreDependenciesConf)
configure(project(":django-bson"), bsonDependenciesConf)
configure(project(":django-core"), coreDependenciesConf)

def publishProjects = [project(":django-bson"), project(":django-core")]

configure(publishProjects) {
    apply from: "${rootDir}/gradle/publish.gradle"
}

//rootProject发布的jar是其他项目的jar组合起来
jar {
    publishProjects.forEach { p->
        dependsOn p.jar
        from {
            def files = zipTree(file(p.jar.archivePath))
                    .matching({
                        exclude "META-INF/"
                    })
            files
        }
    }
}

task sourcesJar(type: Jar) {
    publishProjects.forEach { p ->
        from p.sourceSets.main.allJava
    }
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    publishProjects.forEach { p ->
        from p.javadoc
    }
    classifier = 'javadoc'
}

apply from: "${rootDir}/gradle/publish.gradle"

apply from: "${rootDir}/gradle/utils.gradle"

//只发布根项目
task publishAllInOne() {
    group 'publishing'
    dependsOn(publish)
}
